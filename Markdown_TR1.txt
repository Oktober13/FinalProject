Emily Yeh & Lydia Zuehsow

***************************************************************
Background & Context:
In this project, we would like to create a Harry Potter duel game using OpenCV and pygame. In this game, a player will wave a wand in a certain pattern to cast a spell. The pattern that the wand traces will be tracked using OpenCV, triggering an action scene in pygame. We have two ideas for stretch goals in this project-- first, being able to play with friends across a network, and second, being able to implement special effects, like paralysis, freezing, blinding, and cooldown times.

Here’s a list of approximately all the things we’ll need to accomplish:
Get the wand working efficiently, both physically and virtually (laser pointer version, not color version)
Program spells (using a grid system)
Program the actual action scenes, with pretty graphics
Point systems for multiplayer gameplay and spell tiers
Icing on the cake-- special effects! Paralysis, freezing, blinding, cooldown times
Streeeeeeetch goal-- Networked games, playing with friends using wifi

Libraries used: OpenCV and probably pygame
Our project will be much like the mini-game interactive programming project, except now it’s a big game project! It’s a Model-View-Controller on a massive scale.
OpenCV detects your wand movements, our program interprets them, and pygame displays you kicking some wizardly butt.
Our program will split up the OpenCV screen into a series of gridded quadrants. When you move your wand through the quadrants in a certain order that corresponds to a spell, the computer detects that you cast something and visualizes the appropriate effect. Spells will have a casting cooldown time that we will determine based on how powerful/long-lasting it is. 

In a real Harry Potter duel, duelists wave their wands and say the name of the spell they want to use in order to cast it. In our version, we will just take the wand-waving patterns as input and use that to "cast" spells.


***************************************************************
Key Questions:
1. Given that a moving object is recognized using OpenCV, how do we retrieve the object’s coordinates and use them to draw the exact same figure in pygame?
	a. Are there more efficient ways to do this?
	b. When a line is drawn in pygame, how do we make it trigger an action?
2. The screen always seems to freeze after a few seconds. Why does it do that, and how do we make it not do that?
3. Currently, after one of our quadrants is ‘triggered,’ it stays ‘triggered’ forever (or until a reset button is pushed). How do we implement a time delay feature that resets quadrants that haven’t been ‘triggered’ for a long time?



***************************************************************
Agenda:
1. Show slides, discuss background and context, answer any questions people may have.
2. Discuss what we're doing-- we will each discuss what we've gotten done so far and the problems that we have encountered. During this discussion, we hope to get feedback on how to fix these problems.
3. Ask the audience for any more feedback that they can give us. Is there anything fundamentally wrong with our idea? Do they have more fun ideas for us to pursue in our project?
4. Give closing notes and thank the audience!
